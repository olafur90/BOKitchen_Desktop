<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Auth0.OidcClient.Core</name>
    </assembly>
    <members>
        <member name="T:Auth0.OidcClient.Auth0ClientBase">
            <summary>
            Base class for performing authentication and authorization operations with Auth0 using the
            underlying <see cref="T:IdentityModel.OidcClient.OidcClient"/>.
            </summary>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.#ctor(Auth0.OidcClient.Auth0ClientOptions,System.String)">
            <summary>
            Create a new instance of <see cref="T:Auth0.OidcClient.Auth0ClientBase"/>.
            </summary>
            <param name="options"><see cref="T:Auth0.OidcClient.Auth0ClientOptions"/> specifying the configuration options for this client.</param>
            <param name="platformName">Platform name that forms part of the user-agent when communicating with Auth0 servers.</param>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.LoginAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.LogoutAsync(System.Boolean,System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.PrepareLoginAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.ProcessResponseAsync(System.String,IdentityModel.OidcClient.AuthorizeState,System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.RefreshTokenAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.RefreshTokenAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.RefreshTokenAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientBase.GetUserInfoAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Auth0.OidcClient.Auth0ClientOptions">
            <summary>
            Specifies options that can be passed to <see cref="T:Auth0.OidcClient.Auth0ClientBase"/> implementations.
            </summary>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.Browser">
            <summary>
            The <see cref="T:IdentityModel.OidcClient.Browser.IBrowser"/> implementation responsible for displaying the Auth0 Login screen. Leave this
            unassigned to accept the recommended implementation for platform.
            </summary>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.ClientId">
            <summary>
            Your Auth0 Client ID.
            </summary>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.Domain">
            <summary>
            Your Auth0 tenant domain.
            </summary>
            <remarks>
            e.g. tenant.auth0.com
            </remarks>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.EnableTelemetry">
            <summary>
            Indicates whether basic telemetry information should be included with requests to Auth0.
            </summary>
            <remarks>
            The telemetry information is like a browser user agent and includes operating system
            details only to let Auth0 guide engineering resources based on platform popularity.
            </remarks>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.LoadProfile">
            <summary>
            Indicates whether the user profile should be loaded from the /userinfo endpoint.
            </summary>
            <remarks>
            Defaults to true.
            </remarks>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.Scope">
            <summary>
            The scopes you want to request.
            </summary>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.RefreshTokenMessageHandler">
            <summary>
            Allow overriding the RetryMessageHandler.
            </summary>
            <example>
            var handler = new HttpClientHandler();
            var options = new Auth0ClientOptions
            {
               RefreshTokenMessageHandler = handler
            };
            </example>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.BackchannelHandler">
            <summary>
            Allow overriding the BackchannelHandler.
            </summary>
            <example>
            <code>
            var handler = new HttpClientHandler();
            var options = new Auth0ClientOptions
            {
               BackchannelHandler = handler
            };
            </code>
            </example>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.PostLogoutRedirectUri">
            <summary>
            Override the Redirect URI used to return from logout.
            </summary>
            <remarks>
            Defaults to a platform-specific value you can observe in the debug console window when performing a logout.
            On iOS this is made from the app bundle ID and on Android from a lower-cased version of the package name.
            Whether you use the default or manually set this value it must be added to the 
            Allowed Logout URLs for this application/client to allow the logout process to complete.
            </remarks>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.RedirectUri">
            <summary>
            Override the the Redirect URI used to return from login.
            </summary>
            <remarks>
            Defaults to a platform-specific value you can observe in the debug console window when performing a login.
            On iOS this is made from the app bundle ID and on Android from a lower-cased version of the package name.
            Whether you use the default or manually set this value it must be added to the 
            Allowed Callback URLs for this application/client to allow the login process to complete.
            </remarks>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.Leeway">
            <summary>
            The amount of leeway to accommodate potential clock skew when validating an ID token's claims.
            Defaults to 5 minutes.
            </summary>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.MaxAge">
            <summary>
            Optional limit on the how long since the user was last authenticated.
            </summary>
        </member>
        <member name="P:Auth0.OidcClient.Auth0ClientOptions.LoggerFactory">
            <summary>
            Optional ILoggerFactory implementation to use for logging purposes.
            </summary>
        </member>
        <member name="M:Auth0.OidcClient.Auth0ClientOptions.#ctor">
            <summary>
            Create a new instance of the <see cref="T:Auth0.OidcClient.Auth0ClientOptions"/> class used to configure options for
            <see cref="T:Auth0.OidcClient.Auth0ClientBase"/> implementations by way of their constructors.
            </summary>
        </member>
        <member name="T:Auth0.OidcClient.IAuth0Client">
            <summary>
            Interface for performing authentication and authorization operations with Auth0 using the
            underlying <see cref="T:IdentityModel.OidcClient.OidcClient"/>.
            </summary>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.LoginAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Launches a browser to log the user in.
            </summary>
            <param name="extraParameters">Optional extra parameters that need to be passed to the endpoint.</param>
            <param name="cancellationToken">Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the request.</param>
            <returns>A <see cref="T:IdentityModel.OidcClient.LoginResult"/> containing the tokens and claims.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.LogoutAsync(System.Boolean,System.Object,System.Threading.CancellationToken)">
            <summary>
            Launches a browser to log the user out and clear the Auth0 SSO Cookie.
            </summary>
            <param name="federated">Whether to log the user out of their federated identity provider. Defaults to false.</param>
            <param name="extraParameters">Optional extra parameters that need to be passed to the endpoint.</param>
            <param name="cancellationToken">Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the request.</param>
            <returns>A <see cref="T:IdentityModel.OidcClient.Browser.BrowserResultType"/> indicating whether the logout was successful.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.PrepareLoginAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Generates an <see cref="T:IdentityModel.OidcClient.AuthorizeState"/> containing the URL, state, nonce and code challenge which can
            be used to redirect the user to the authorization URL, and subsequently process any response by calling
            the <see cref="M:Auth0.OidcClient.IAuth0Client.ProcessResponseAsync(System.String,IdentityModel.OidcClient.AuthorizeState,System.Object,System.Threading.CancellationToken)"/> method.
            </summary>
            <param name="extraParameters">Optional extra parameters that need to be passed to the endpoint.</param>
            <param name="cancellationToken">Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the request.</param>
            <returns>A <see cref="T:IdentityModel.OidcClient.AuthorizeState"/> with necessary URLs, nonce, state and code verifiers.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.ProcessResponseAsync(System.String,IdentityModel.OidcClient.AuthorizeState,System.Object,System.Threading.CancellationToken)">
            <summary>
            Process the response from the Auth0 redirect URI.
            </summary>
            <param name="data">The data containing the full redirect URI.</param>
            <param name="state">The <see cref="T:IdentityModel.OidcClient.AuthorizeState"/> which was generated when the <see cref="M:Auth0.OidcClient.IAuth0Client.PrepareLoginAsync(System.Object,System.Threading.CancellationToken)"/>
            method was called.</param>
            <param name="extraParameters">Optional extra parameters that need to be passed to the endpoint.</param>
            <param name="cancellationToken">Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the request.</param>
            <returns>A <see cref="T:IdentityModel.OidcClient.LoginResult"/> containing the tokens and claims.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.RefreshTokenAsync(System.String,System.Threading.CancellationToken)">
            <returns>A <see cref="T:IdentityModel.OidcClient.LoginResult"/> containing the tokens and claims.</returns>
            <summary>
            Generates a new set of tokens based on a refresh token. 
            </summary>
            <param name="refreshToken">Refresh token which was issued during the authorization flow, or subsequent
            calls to <see cref="M:IdentityModel.OidcClient.OidcClient.RefreshTokenAsync(System.String,IdentityModel.Client.Parameters,System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="cancellationToken">Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the request.</param>
            <returns>A <see cref="T:IdentityModel.OidcClient.Results.RefreshTokenResult"/> with the refreshed tokens.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.RefreshTokenAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Generates a new set of tokens based on a refresh token. 
            </summary>
            <param name="refreshToken">Refresh token which was issued during the authorization flow, or subsequent
            calls to <see cref="M:IdentityModel.OidcClient.OidcClient.RefreshTokenAsync(System.String,IdentityModel.Client.Parameters,System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="extraParameters">Optional extra parameters that need to be passed to the endpoint.</param>
            <param name="cancellationToken">Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the request.</param>
            <returns>A <see cref="T:IdentityModel.OidcClient.Results.RefreshTokenResult"/> with the refreshed tokens.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.RefreshTokenAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Generates a new set of tokens based on a refresh token. 
            </summary>
            <param name="refreshToken">Refresh token which was issued during the authorization flow, or subsequent
            calls to <see cref="M:IdentityModel.OidcClient.OidcClient.RefreshTokenAsync(System.String,IdentityModel.Client.Parameters,System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="scope">Space separated list of the requested scopes.</param>
            <param name="extraParameters">Optional extra parameters that need to be passed to the endpoint.</param>
            <param name="cancellationToken">Optional <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the request.</param>
            <returns>A <see cref="T:IdentityModel.OidcClient.Results.RefreshTokenResult"/> with the refreshed tokens.</returns>
        </member>
        <member name="M:Auth0.OidcClient.IAuth0Client.GetUserInfoAsync(System.String)">
            <summary>
            Gets the user claims from the userinfo endpoint.
            </summary>
            <param name="accessToken">Access token to use in obtaining claims.</param>
            <returns>
            <returns>A <see cref="T:IdentityModel.OidcClient.Results.UserInfoResult"/> with the user information and claims.</returns>
            </returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="accessToken"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">When no userinfo endpoint specified.</exception>
        </member>
        <member name="T:Auth0.OidcClient.Tokens.Auth0ClaimNames">
            <summary>
            List of Auth0 specific claims
            </summary>
        </member>
        <member name="T:Auth0.OidcClient.Tokens.IdTokenRequirements">
            <summary>
            Identity token validation requirements for use with <see cref="T:Auth0.OidcClient.Tokens.IdTokenValidator"/>.
            </summary>
        </member>
        <member name="F:Auth0.OidcClient.Tokens.IdTokenRequirements.Issuer">
            <summary>
            Required issuer (iss) the token must be from.
            </summary>
        </member>
        <member name="F:Auth0.OidcClient.Tokens.IdTokenRequirements.Audience">
            <summary>
            Required audience (aud) the token must be for.
            </summary>
        </member>
        <member name="F:Auth0.OidcClient.Tokens.IdTokenRequirements.Nonce">
            <summary>
            Optional one-time nonce the token must be issued in response to.
            </summary>
        </member>
        <member name="F:Auth0.OidcClient.Tokens.IdTokenRequirements.MaxAge">
            <summary>
            Optional maximum time since the user last authenticated.
            </summary>
        </member>
        <member name="F:Auth0.OidcClient.Tokens.IdTokenRequirements.Leeway">
            <summary>
            Amount of leeway to allow in validating date and time claims in order to allow some clock variance
            between the issuer and the application.
            </summary>
        </member>
        <member name="F:Auth0.OidcClient.Tokens.IdTokenRequirements.Organization">
            <summary>
            Required organization the token must be for.
            </summary>
            <remarks>
            - If you provide an Organization ID (a string with the prefix `org_`), it will be validated against the `org_id` claim of your user's ID Token. The validation is case-sensitive.
            - If you provide an Organization Name (a string *without* the prefix `org_`), it will be validated against the `org_name` claim of your user's ID Token. The validation is case-insensitive.
            </remarks>
        </member>
        <member name="M:Auth0.OidcClient.Tokens.IdTokenRequirements.#ctor(System.String,System.String,System.TimeSpan,System.Nullable{System.TimeSpan},System.String)">
            <summary>
            Create a new instance of <see cref="T:Auth0.OidcClient.Tokens.IdTokenRequirements"/> with specified parameters.
            </summary>
            <param name="issuer">Required issuer (iss) the token must be from.</param>
            <param name="audience">Required audience (aud) the token must be for.</param>
            <param name="leeway">Amount of leeway in validating date and time claims to allow some clock variance
            between the issuer and the application.</param>
            <param name="maxAge">Optional maximum time since the user last authenticated.</param>
            <param name="organization">Optional organization the token must be for.</param>
        </member>
        <member name="T:Auth0.OidcClient.Tokens.IdTokenValidationException">
            <summary>
            Exception used to convey ways in which an identity token has failed to be validated.
            </summary>
        </member>
        <member name="M:Auth0.OidcClient.Tokens.IdTokenValidationException.#ctor">
            Create a new <see cref="T:Auth0.OidcClient.Tokens.IdTokenValidationException"/> with no error message.
        </member>
        <member name="M:Auth0.OidcClient.Tokens.IdTokenValidationException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Auth0.OidcClient.Tokens.IdTokenValidationException"/> with a given error message.
            </summary>
            <param name="message">Message that describes how the token fails to meet validation requirements.</param>
        </member>
        <member name="M:Auth0.OidcClient.Tokens.IdTokenValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:Auth0.OidcClient.Tokens.IdTokenValidationException"/> that contains a further inner 
            <see cref="T:System.Exception"/> describing how this token could not be validated.
            </summary>
            <param name="message">Message that describes how the token fails to meet validation requirements.</param>
            <param name="innerException">Inner exception that caused this validation exception.</param>
        </member>
        <member name="M:Auth0.OidcClient.Tokens.IdTokenValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Auth0.OidcClient.Tokens.IdTokenValidator">
            <summary>
            Perform validation of a JWT ID token in compliance with specified <see cref="T:Auth0.OidcClient.Tokens.IdTokenRequirements"/>.
            </summary>
        </member>
        <member name="M:Auth0.OidcClient.Tokens.IdTokenValidator.AssertTokenMeetsRequirements(Auth0.OidcClient.Tokens.IdTokenRequirements,System.String,System.Nullable{System.DateTime},Auth0.OidcClient.Tokens.ISignatureVerifier)">
            <summary>
            Assert that all the <see cref="T:Auth0.OidcClient.Tokens.IdTokenRequirements"/> are met by a JWT ID token for a given point in time.
            </summary>
            <param name="required"><see cref="T:Auth0.OidcClient.Tokens.IdTokenRequirements"/> that should be asserted.</param>
            <param name="rawIDToken">Raw ID token to assert requirements against.</param>
            <param name="pointInTime">Optional <see cref="T:System.DateTime"/> to act as "Now" in order to facilitate unit testing with static tokens.</param>
            <param name="signatureVerifier">Optional <see cref="T:Auth0.OidcClient.Tokens.ISignatureVerifier"/> to perform signature verification and token extraction. If unspecified
            <see cref="T:Auth0.OidcClient.Tokens.AsymmetricSignatureVerifier"/> is used against the <paramref name="required"/> Issuer.</param>
            <exception cref="T:Auth0.OidcClient.Tokens.IdTokenValidationException">Exception thrown if <paramref name="rawIDToken"/> fails to
            meet the requirements specified by <paramref name="required"/>.
            </exception>
            <returns><see cref="T:System.Threading.Tasks.Task"/> that will complete when the token is validated.</returns>
        </member>
        <member name="M:Auth0.OidcClient.Tokens.IdTokenValidator.AssertTokenClaimsMeetRequirements(Auth0.OidcClient.Tokens.IdTokenRequirements,System.IdentityModel.Tokens.Jwt.JwtSecurityToken,System.DateTime)">
            <summary>
            Assert that all the claims within a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> meet the specified <see cref="T:Auth0.OidcClient.Tokens.IdTokenRequirements"/> for a given point in time.
            </summary>
            <param name="required"><see cref="T:Auth0.OidcClient.Tokens.IdTokenRequirements"/> that should be asserted.</param>
            <param name="token"><see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> to assert requirements against.</param>
            <param name="pointInTime"><see cref="T:System.DateTime"/> to act as "Now" when asserting time-based claims.</param>
            <exception cref="T:Auth0.OidcClient.Tokens.IdTokenValidationException">Exception thrown if <paramref name="token"/> fails to
            meet the requirements specified by <paramref name="required"/>.
            </exception>
        </member>
        <member name="M:Auth0.OidcClient.Tokens.IdTokenValidator.GetEpoch(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)">
            <summary>
            Get a epoch (Unix time) value for a given claim.
            </summary>
            <param name="claims"><see cref="T:System.Collections.Generic.IEnumerable`1"/>Claims to search the <paramref name="claimType"/> for.</param>
            <param name="claimType">Type of claim to search the <paramref name="claims"/> for.  See <see cref="T:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames"/> for possible names.</param>
            <returns>A <see cref="T:System.Nullable`1"/> containing the epoch value or <see langword="null"/> if no matching value was found.</returns>
        </member>
        <member name="M:Auth0.OidcClient.Tokens.IdTokenValidator.GetClaimValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)">
            <summary>
            Get the value for a given claim.
            </summary>
            <param name="claims"><see cref="T:System.Collections.Generic.IEnumerable`1"/>Claims to search the <paramref name="claimType"/> for.</param>
            <param name="claimType">Type of claim to search the <paramref name="claims"/> for. See <see cref="T:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames"/> or <see cref="T:Auth0.OidcClient.Tokens.Auth0ClaimNames"/> for possible names.</param>
            <returns><see cref="T:System.String"/> containing the value or <see langword="null"/> if no matching value was found.</returns>
        </member>
    </members>
</doc>
